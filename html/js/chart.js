// Generated by CoffeeScript 1.6.3
(function() {
  var __slice = [].slice;

  this.Chart = (function() {
    Chart.prototype.key = function(date) {
      return utils.json("" + this.design + "_show/unix_to_couchm_ts?feed=" + this.feed + "&timestamp=" + (+date));
    };

    Chart.prototype.nowInView = function() {
      var _ref;
      return (+this.x.domain()[0] < (_ref = +(new Date)) && _ref < +this.x.domain()[1]);
    };

    function Chart(config, db) {
      var formats,
        _this = this;
      this.config = config;
      this.db = db;
      this.design = "" + this.db + "/_design/energy_data/";
      this.feed = this.config.feed;
      this.touching = false;
      this.transforming = false;
      this.toDefaultView = false;
      this.showLoading = false;
      this.display = [new TotalPower(this)];
      this.x = d3.time.scale();
      this.y = d3.scale.linear().domain([0, this.config.y_axis_minimum_size]);
      formats = [
        [
          d3.time.format('%Y'), function() {
            return true;
          }
        ], [
          d3.time.format('%b'), function(d) {
            return d.getMonth();
          }
        ], [
          d3.time.format('%b %_d'), function(d) {
            return d.getDate() !== 1;
          }
        ], [
          d3.time.format('%a %_d'), function(d) {
            return d.getDay() && d.getDate() !== 1;
          }
        ], [
          d3.time.format('%_H:%M'), function(d) {
            return d.getHours();
          }
        ], [
          d3.time.format('%_H:%M'), function(d) {
            return d.getMinutes();
          }
        ], [
          d3.time.format(':%S'), function(d) {
            return d.getSeconds();
          }
        ], [
          d3.time.format('.%L'), function(d) {
            return d.getMilliseconds();
          }
        ]
      ];
      this.xAxis = d3.svg.axis().orient('bottom').scale(this.x).ticks(10).tickPadding(6).tickFormat(function(date) {
        var f, i;
        i = formats.length - 1;
        f = formats[i];
        while (!f[1](date)) {
          f = formats[--i];
        }
        return f[0](date);
      });
      this.yAxis = d3.svg.axis().scale(this.y).orient('left').ticks(5).tickPadding(6).tickFormat(function(d) {
        return "" + d + " " + _this.display[0].unit;
      });
    }

    Chart.prototype.init = function(title, chartTitle, time, zoomer, meter, buttons, fs, today) {
      var fullscreen, fullscreening,
        _this = this;
      this.title = d3.select(title);
      this.chartTitle = d3.select(chartTitle);
      this.time = d3.select(time);
      this.zoomer = d3.select(zoomer);
      this.meter = d3.select(meter);
      this.buttons = d3.select(buttons);
      this.fullscreener = d3.select(fs);
      this.today = d3.select(today);
      this.loading = this.time.select('.loading');
      this.setHeader(null, true);
      this.bubbleBath = new BubbleBath(this.time.select('.bubblebath'), this.db, this);
      this.zoom = d3.behavior.zoom().on('zoom', function() {
        return _this.transform();
      });
      this.time.call(this.zoom);
      (function() {
        var cancel, loadTimeout, preventMultitouch, returnTimeout, zoom;
        returnTimeout = null;
        loadTimeout = null;
        zoom = [];
        cancel = function(timeout) {
          if (timeout != null) {
            return clearTimeout(timeout);
          }
        };
        preventMultitouch = function() {
          if (d3.touches(document.body).length > 1) {
            d3.event.preventDefault();
            return d3.event.stopPropagation();
          }
        };
        return d3.select(window).on('touchstart', function() {
          preventMultitouch();
          _this.touching = true;
          zoom = [_this.zoom.translate()[0], _this.zoom.scale()];
          return returnTimeout = cancel(returnTimeout);
        }, true).on('touchmove', function() {
          preventMultitouch();
          if (!_this.transforming) {
            _this.hideMeter();
            _this.transforming = true;
          }
          return returnTimeout = cancel(returnTimeout);
        }, true).on('touchend', function() {
          var timeout;
          preventMultitouch();
          _this.touching = false;
          if (_this.transforming) {
            _this.showMeter();
            _this.transforming = false;
          }
          loadTimeout = cancel(loadTimeout);
          if (zoom[0] !== _this.zoom.translate()[0] || zoom[1] !== _this.zoom.scale()) {
            timeout = setTimeout((function() {
              return _this.loadData();
            }), 500);
          }
          returnTimeout = setTimeout(function() {
            _this.fullscreener.classed('hidden', false);
            return _this.toggleFullscreen(false, function() {
              _this.transform();
              _this.toDefaultView = true;
              _this.autopan(_this.defaultDomain());
              return _this.loadData();
            });
          }, _this.config.default_view_after);
          return _this.today.classed('active', false);
        }, true).on('mousewheel', function() {
          d3.event.stopPropagation();
          return d3.event.preventDefault();
        }, true);
      })();
      document.oncontextmenu = function() {
        return false;
      };
      (function(that) {
        var offset;
        offset = 0;
        _this.zoomer = d3.select('.zoomer');
        return _this.zoomer.select('.handle').call(d3.behavior.drag().on('dragstart', function() {
          if (d3.touches(this).length) {
            return offset = -d3.touches(this)[0][0];
          }
        }).on('drag', function() {
          var ext, origin, position, scale, translate;
          position = (d3.event.x + offset) / (that.zoomer.node().clientWidth - this.clientWidth);
          if (position < 0) {
            position = 0;
          }
          if (position > 1) {
            position = 1;
          }
          ext = that.zoom.scaleExtent();
          scale = ext[0] + Math.pow(position, 4) * (ext[1] - ext[0]);
          origin = that.width / 2;
          translate = origin - (origin - that.zoom.translate()[0]) * scale / that.zoom.scale();
          that.zoom.translate([translate, 0]);
          that.zoom.scale(scale);
          return that.transform();
        }));
      })(this);
      (function() {
        var button, overview;
        button = function(cls, handler, state) {
          var that;
          that = _this;
          return _this.buttons.append('div').classed(cls, true).classed('button', true).classed('active', state).on('touchstart', function() {
            var el;
            el = d3.select(this);
            state = !el.classed('active');
            el.classed('active', state);
            return handler.bind(that)(state, this);
          });
        };
        overview = button('overview', function() {
          _this.fullscreener.classed('hidden', false);
          _this.toggleFullscreen(false, function() {
            _this.transform();
            _this.defaultView();
            return _this.loadData();
          });
          return overview.classed('active', true);
        }, true);
        button('watt-hours', function(showWh) {
          _this.display[0] = new (showWh ? TotalEnergy : TotalPower)(_this);
          _this.display[0].init();
          return _this.loadData();
        }, false);
        button('highlights', function(showHighlights) {
          return d3.select('.bubblebath').classed('withHighlights', showHighlights);
        }, true);
        return _this.today.on('touchstart', function() {
          return _this.today.classed('active', true);
        }).on('touchend', function() {
          _this.toDefaultView = true;
          return _this.autopan(_this.defaultDomain());
        });
      })();
      (function() {
        var endkey, process, startkey, url;
        process = function(doc) {
          _this.doc = doc;
          return console.log('', doc);
        };
        startkey = JSON.stringify([_this.feed]);
        endkey = JSON.stringify([_this.feed, {}]);
        url = ("" + _this.db + "/_design/energy_data/_view/by_source_and_time") + ("?group_level=1&startkey=" + startkey + "&endkey=" + endkey);
        return utils.json(url).then(function(result) {
          var source, value;
          value = result.rows[0].value;
          process({
            timestamp: +new Date(value[_this.config.at_idx]),
            ElectricPower: value[_this.config.datastream_idx.ElectricPower],
            ElectricEnergy: value[_this.config.datastream_idx.ElectricEnergy]
          });
          url = ("" + _this.db + "/_changes?filter=energy_data/") + ("measurements&include_docs=true&source=" + _this.feed);
          url = "" + url + "&feed=eventsource&since=now";
          source = new EventSource(url, {
            withCredentials: true
          });
          return source.onmessage = function(e) {
            return process(JSON.parse(e.data).doc);
          };
        });
      })();
      this.lastFullUpdate = this.lastQuickUpdate = +(new Date);
      this.scheduleUpdate();
      this.display[0].init();
      fullscreening = false;
      this.fullscreener.on('touchstart', function() {
        return d3.select(this).classed('active', fullscreening = true);
      });
      fullscreen = function(transition) {
        _this.fullscreener.classed('active', false).classed('hidden', true);
        return _this.toggleFullscreen(true, function() {
          _this.transform();
          _this.defaultView();
          return _this.loadData();
        }, transition);
      };
      d3.select('body').on('touchend', function() {
        if (!fullscreening) {
          return;
        }
        fullscreening = false;
        return fullscreen(true);
      });
      return fullscreen(false);
    };

    Chart.prototype.energy = function(date) {
      var deferred, index, process,
        _this = this;
      if (this.energyBufferTime == null) {
        this.energyBufferTime = [];
      }
      if (this.energyBufferValue == null) {
        this.energyBufferValue = [];
      }
      deferred = Q.defer();
      index = this.energyBufferTime.indexOf(+date);
      if (+date > +(new Date)) {
        date = null;
      }
      if (index !== -1) {
        deferred.resolve(this.energyBufferValue[index]);
      } else {
        process = function(timestamp, power, energy) {
          var h, kW;
          kW = power / 1000;
          h = (+date - timestamp) / 1000 / 60 / 60;
          if (h > 0) {
            energy += kW * h;
          }
          _this.energyBufferTime.push(+date);
          _this.energyBufferValue.push(+energy);
          if (_this.energyBufferTime.length > _this.config.energy_buffer_size) {
            _this.energyBufferTime.shift();
            _this.energyBufferValue.shift();
          }
          return deferred.resolve(energy);
        };
        if (!((date != null) || this.doc)) {
          date = +(new Date);
        }
        if (date) {
          this.key(date).then(function(key) {
            var endkey, startkey, url;
            startkey = JSON.stringify([_this.feed]);
            endkey = JSON.stringify(key);
            url = ("" + _this.design + "_view/by_source_and_time") + ("?group_level=1&startkey=" + startkey + "&endkey=" + endkey);
            return utils.json(url).then(function(result) {
              var value;
              value = result.rows[0].value;
              return process(+new Date(value[_this.config.at_idx]), value[_this.config.datastream_idx.ElectricPower], value[_this.config.datastream_idx.ElectricEnergy]);
            });
          });
        } else {
          date = +(new Date);
          process(this.doc.timestamp, this.doc.ElectricPower, this.doc.ElectricEnergy);
        }
      }
      return deferred.promise;
    };

    Chart.prototype.scheduleUpdate = function() {
      var untilFull, untilQuick,
        _this = this;
      untilQuick = this.lastQuickUpdate + this.config.quick_update - +(new Date);
      untilFull = this.lastFullUpdate + this.config.full_update - +(new Date);
      if (untilFull <= this.config.quick_update) {
        return setTimeout((function() {
          return _this.fullUpdate();
        }), untilFull);
      } else {
        return setTimeout((function() {
          return _this.quickUpdate();
        }), untilQuick);
      }
    };

    Chart.prototype.quickUpdate = function() {
      var _base,
        _this = this;
      this.lastQuickUpdate = +(new Date);
      this.scheduleUpdate();
      if (!this.touching) {
        if (this.nowInView()) {
          Q.spread([this.energy(), this.energy(this.defaultDomain()[0])], function(e1, e0) {
            var energy, value;
            energy = (e1 - e0) * 1000;
            value = Math.round(energy);
            return _this.meter.select('text').text("" + value + " Wh");
          });
          if ((this.data != null) && (this.doc != null)) {
            this.data.push({
              at: new Date(this.doc.timestamp),
              resampledAt: new Date,
              value: parseFloat(this.doc.ElectricPower)
            });
            this.updateWithData();
          }
          return typeof (_base = this.display[0]).transformExtras === "function" ? _base.transformExtras() : void 0;
        }
      }
    };

    Chart.prototype.fullUpdate = function() {
      this.lastFullUpdate = this.lastQuickUpdate = +(new Date);
      this.scheduleUpdate();
      return this.loadData();
    };

    Chart.prototype.defaultDomain = function() {
      var end, endH, n, start, startH;
      n = new Date;
      startH = n.getHours() > this.config.work_day_hours[0] ? this.config.work_day_hours[0] : this.config.work_day_hours[0] - 24;
      start = new Date(n.getFullYear(), n.getMonth(), n.getDate(), startH);
      /*
      endH = if n.getHours() < @config.work_day_hours[0] - 1
        @config.work_day_hours[1]
      else
        startH + 24
      */

      endH = this.config.work_day_hours[1];
      end = new Date(n.getFullYear(), n.getMonth(), n.getDate(), endH);
      return [start, end];
    };

    Chart.prototype.defaultView = function() {
      var defaultTimeInView, domain;
      this.x.domain(domain = this.defaultDomain());
      defaultTimeInView = domain[1] - domain[0];
      this.zoom.x(this.x).scaleExtent([defaultTimeInView / this.config.max_time_in_view, defaultTimeInView / this.config.min_time_in_view]);
      this.today.style('opacity', 0);
      return this.transform();
    };

    Chart.prototype.autopan = function(domain) {
      var zooms,
        _this = this;
      if (!this.toDefaultView) {
        this.today.style('opacity', 1);
      }
      d3.transition().duration(1000).tween('zoom', function() {
        var inter;
        inter = d3.interpolate(_this.x.domain().map(Number), domain.map(Number));
        return function(t) {
          _this.x.domain(inter(t));
          _this.zoom.x(_this.x);
          return _this.transform();
        };
      });
      zooms = this.time.select('.zooms').style('opacity', 0);
      this.showLoading = false;
      this.loadData(true, domain).then(function() {
        return zooms.style('opacity', 1);
      });
      return this.setHeader(domain);
    };

    Chart.prototype.bringIntoView = function(time) {
      var add, end, interval, start, _ref;
      _ref = this.x.domain().map(function(d) {
        return +d;
      }), start = _ref[0], end = _ref[1];
      interval = end - start;
      add = 0;
      while (+time < start + add) {
        add -= interval;
      }
      while (+time > end + add) {
        add += interval;
      }
      return this.autopan([new Date(start + add), new Date(end + add)]);
    };

    Chart.prototype.setHeader = function(domain, today) {
      var end, format, start, text;
      if (domain == null) {
        domain = this.x.domain();
      }
      if (today == null) {
        today = false;
      }
      text = today ? 'Today’s electricity usage' : (format = d3.time.format('%b %d, %H:%M'), start = format(domain[0]), end = format(domain[1]), "Electricity usage: " + start + " – " + end);
      return d3.select('.chart-title').text(text);
    };

    Chart.prototype.hideMeter = function() {
      return this.meter.classed('hidden', true);
    };

    Chart.prototype.showMeter = function() {
      var end, start,
        _this = this;
      this.meter.classed('hidden', false);
      if (this.nowInView()) {
        this.meter.select('.now').style('opacity', 1);
        return this.quickUpdate();
      } else {
        this.meter.select('.now').style('opacity', 0);
        start = this.x.domain()[0];
        end = this.x.domain()[1];
        return Q.spread([this.energy(start), this.energy(end)], function(e0, e1) {
          var energy, value;
          energy = (e1 - e0) * 1000;
          value = Math.round(energy);
          _this.meter.select('text').text("" + value + " Wh");
          _this.meter.classed('hidden', false);
          return _this.meter.select('.now').style('opacity', 0);
        });
      }
    };

    Chart.prototype.getTickInfo = function() {
      var date, distance, dts, i, smallest, ticks, _i, _len, _ref;
      ticks = this.time.selectAll('.x.axis .tick');
      if ((_ref = ticks[0]) != null ? _ref.length : void 0) {
        dts = [];
        ticks.each(function(d) {
          return dts.push(new Date(d));
        });
        dts = dts.sort(function(a, b) {
          return +a - +b;
        });
        smallest = Infinity;
        for (i = _i = 0, _len = dts.length; _i < _len; i = ++_i) {
          date = dts[i];
          if (i > 0) {
            distance = +date - +dts[i - 1];
            if (distance < smallest) {
              smallest = distance;
            }
          }
        }
        if (smallest < Infinity) {
          return {
            duration: smallest,
            first: dts[0]
          };
        }
      }
    };

    Chart.prototype.loadData = function(first, domain) {
      var deferred, k, params, url, v, _ref,
        _this = this;
      if (domain == null) {
        domain = this.x.domain();
      }
      deferred = Q.defer();
      params = this.display[0].getParameters(domain);
      params.feed = this.display[0].feed;
      params.datastream = this.display[0].datastream;
      url = ("" + this.db + "/_design/energy_data/_show/historical?") + ((function() {
        var _results;
        _results = [];
        for (k in params) {
          v = params[k];
          _results.push("" + k + "=" + (encodeURIComponent(v)));
        }
        return _results;
      })()).join('&');
      Q.spread([utils.json(url), (_ref = this.bubbleBath).load.apply(_ref, [[this.display[0].feed]].concat(__slice.call(this.x.domain())))], function(result, bubbles) {
        _this.bubbles = bubbles;
        _this.data = _this.display[0].getDataFromRequest(params, result);
        _this.updateWithData(true);
        return deferred.resolve();
      });
      if (this.showLoading) {
        this.loading.attr('opacity', .6);
        this.showLoading = false;
        deferred.resolve();
      }
      return deferred.promise;
    };

    Chart.prototype.updateWithData = function(stay, data, bubbles) {
      var from, newDomain, oldDomain, tempScale, to, _base;
      if (stay == null) {
        stay = false;
      }
      this.data = data != null ? data : this.data;
      this.bubbles = bubbles != null ? bubbles : this.bubbles;
      oldDomain = this.y.domain()[1];
      newDomain = d3.max(this.data.map(function(d) {
        return d.value;
      }));
      if (this.bubbles != null) {
        this.bubbles.each(function(d) {
          return newDomain = d3.max([newDomain, parseFloat(d.value)]);
        });
      }
      if (newDomain === 0) {
        newDomain = this.config.y_axis_minimum_size;
      }
      if ((oldDomain * this.config.y_axis_shrink_factor < newDomain && newDomain < oldDomain)) {
        newDomain = oldDomain;
      } else {
        newDomain *= this.config.y_axis_factor;
      }
      tempScale = newDomain / oldDomain;
      if (newDomain !== oldDomain) {
        this.y.domain([0, newDomain]);
        this.transformYAxis(true);
        from = "matrix(1, 0, 0,            " + tempScale + ", 0, " + ((this.height - 48) * (1 - tempScale)) + ")            scale(" + (1 / this.zoom.scale()) + ", 1)            translate(" + (-this.zoom.translate()[0]) + ", 0)";
        to = "scale(" + (1 / this.zoom.scale()) + ", 1)            translate(" + (-this.zoom.translate()[0]) + ", 0)";
        if (stay) {
          from = to;
        }
        this.display[0].setDataAndTransform(this.data, from, to);
      } else {
        to = "scale(" + (1 / this.zoom.scale()) + ", 1)            translate(" + (-this.zoom.translate()[0]) + ", 0)";
        this.display[0].setDataAndTransform(this.data, null, to, false);
      }
      if (typeof (_base = this.display[0]).transformExtras === "function") {
        _base.transformExtras();
      }
      this.bubbleBath.position();
      return this.loading.attr('opacity', 0);
    };

    Chart.prototype.transform = function() {
      var handle, scale, width, zmax, zmin, _base, _ref;
      this.transformXAxis();
      this.time.select('.zooms').attr('transform', "translate(" + (this.zoom.translate()[0]) + ", 0) scale(" + (this.zoom.scale()) + ", 1)");
      handle = this.zoomer.select('.handle').node();
      scale = this.zoom.scale();
      _ref = this.zoom.scaleExtent(), zmin = _ref[0], zmax = _ref[1];
      width = this.zoomer.node().clientWidth - handle.clientWidth;
      handle.style.left = Math.pow((scale - zmin) / (zmax - zmin), 1 / 4) * width + 'px';
      this.bubbleBath.position();
      if (typeof (_base = this.display[0]).transformExtras === "function") {
        _base.transformExtras();
      }
      if (this.toDefaultView) {
        this.setHeader(null, true);
        this.toDefaultView = false;
        return this.today.style('opacity', 0);
      } else if (this.transforming) {
        this.setHeader();
        return this.today.style('opacity', 1);
      }
    };

    Chart.prototype.transformXAxis = function() {
      var axis, left1, left2, oi, tickDistance, ticks, _ref;
      axis = this.time.select('.x.axis').call(this.xAxis);
      oi = 0;
      axis.selectAll('.tick').sort(function(a, b) {
        return +a - +b;
      }).each(function(_, i) {
        if (oi === 0 && d3.select(this).classed('odd')) {
          return oi = i;
        }
      }).each(function(_, i) {
        return d3.select(this).classed('odd', oi % 2 === i % 2);
      });
      axis.selectAll('text').attr('x', 16).attr('y', this.height - 32);
      ticks = axis.selectAll('.tick');
      if (((_ref = ticks[0]) != null ? _ref.length : void 0) >= 2) {
        left1 = ticks[0][0].transform.baseVal.getItem(0).matrix.e;
        left2 = ticks[0][1].transform.baseVal.getItem(0).matrix.e;
        tickDistance = left2 - left1;
        return axis.selectAll('line').attr('stroke-width', tickDistance).attr('x1', tickDistance / 2).attr('x2', tickDistance / 2);
      }
    };

    Chart.prototype.transformYAxis = function(transition) {
      var axis;
      if (transition == null) {
        transition = false;
      }
      axis = this.time.select('.y.axis');
      if (transition) {
        axis = axis.transition().duration(1000);
      }
      axis.call(this.yAxis);
      axis = this.time.select('.yText.axis');
      if (transition) {
        axis = axis.transition().duration(1000);
      }
      axis.call(this.yAxis);
      return axis.selectAll('text').attr('x', 5).attr('y', -16);
    };

    Chart.prototype.toggleFullscreen = function(fullscreen, callback, transition) {
      var change, height, resize, width,
        _this = this;
      if (transition == null) {
        transition = true;
      }
      this.fullscreen = fullscreen != null ? fullscreen : !this.fullscreen;
      change = function(x, y, width, height, bubbleOpacity) {
        _this.width = width;
        _this.height = height;
        _this.time.style('-webkit-transform', "translate(" + x + "px, " + y + "px)");
        _this.adjustToSize();
        return _this.time.select('.bubblebath').attr('opacity', bubbleOpacity);
      };
      resize = function(x, y, width, height, bubbleOpacity) {
        if (transition) {
          return _this.time.classed('resizing', true).style('-webkit-transform', "                  translate(" + x + "px, " + y + "px)                  scale(" + (width / _this.width) + ", " + (height / _this.height) + ")").on('webkitTransitionEnd', function() {
            d3.select(this).on('webkitTransitionEnd', null);
            change(x, y, width, height, bubbleOpacity);
            this.classList.remove('resizing');
            return typeof callback === "function" ? callback() : void 0;
          });
        } else {
          change(x, y, width, height, bubbleOpacity);
          return typeof callback === "function" ? callback() : void 0;
        }
      };
      width = document.body.clientWidth;
      height = document.body.clientHeight;
      if (this.fullscreen) {
        resize(0, 200, width, height - 366, 1);
      } else {
        resize(64 + 512, 192, width - 2 * (64 + 512), height - 192 - 32, 0);
      }
      cardboard.toggleVisible(!this.fullscreen);
      this.title.classed('visible', !this.fullscreen);
      this.buttons.classed('visible', this.fullscreen);
      this.zoomer.classed('visible', this.fullscreen);
      this.meter.classed('fullscreen', this.fullscreen);
      this.chartTitle.classed('fullscreen', this.fullscreen);
      d3.select('.chart-subtitle').classed('fullscreen', this.fullscreen);
      if (!this.fullscreen) {
        this.today.style('opacity', 0);
        this.loadData();
        return this.setHeader(null, true);
      }
    };

    Chart.prototype.adjustToSize = function() {
      this.x.range([0, this.width]);
      this.y.range([this.height - this.config.padding_bottom, this.config.padding_top]);
      this.xAxis.scale(this.x).tickSize(this.height);
      this.yAxis.scale(this.y).tickSize(-this.width);
      this.time.select('.x.axis').call(this.xAxis);
      this.transformYAxis();
      this.time.attr('width', this.width).attr('height', this.height);
      this.time.select('.leftGradientBox').attr('height', this.height);
      this.loading.select('rect').attr('width', this.width).attr('height', this.height);
      this.loading.select('text').attr('dx', this.width / 2).attr('dy', this.height / 2);
      return this.display[0].transform();
    };

    return Chart;

  })();

}).call(this);
