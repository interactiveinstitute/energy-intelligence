// Generated by CoffeeScript 1.6.3
(function() {
  this.Cardboard = (function() {
    Cardboard.prototype.parameters = function(p) {
      return Object.keys(p).map(function(k) {
        return "" + k + "=" + p[k];
      }).join('&');
    };

    function Cardboard(config) {
      this.width = config.card_width;
      this.db = config.database;
      this.feed = config.feed;
    }

    Cardboard.prototype.init = function(containers) {
      var params, url, width,
        _this = this;
      width = this.width;
      this.containers = d3.selectAll(containers).each(function() {
        return d3.select(this).style('width', width + 'px').style('height', this.dataset.height + 'px');
      });
      this.toggleVisible(false);
      params = this.parameters({
        filter: 'event/cards',
        feed: 'eventsource',
        include_docs: true,
        since: 'now',
        source: this.feed
      });
      this.source = new EventSource("" + this.db + "/_changes?" + params, {
        withCredentials: true
      });
      this.source.onmessage = function(e) {
        var doc, key, value, _ref, _results;
        doc = JSON.parse(e.data).doc;
        if (doc.output) {
          _ref = doc.output;
          _results = [];
          for (key in _ref) {
            value = _ref[key];
            if ((value.sp_card != null) && value.feed === _this.feed) {
              _results.push(_this._add(doc._id, key, value.sp_card));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      };
      params = this.parameters({
        startkey: JSON.stringify([this.feed]),
        endkey: JSON.stringify([this.feed, {}])
      });
      url = "" + this.db + "/_design/events/_view/cards_by_feed_and_time?" + params;
      return utils.json(url).then(function(result) {
        var row, _i, _len, _ref, _results;
        _ref = result.rows;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          row = _ref[_i];
          _results.push(_this._add(row.id, row.key[2], row.value));
        }
        return _results;
      });
    };

    Cardboard.prototype.toggleVisible = function(visible) {
      if (this.containers) {
        return this.containers.classed('visible', visible);
      }
    };

    Cardboard.prototype._add = function(_id, key, card) {
      var width;
      console.log('adding', _id, key);
      width = this.width;
      return this.containers.each(function() {
        var cards, container, data;
        container = d3.select(this);
        if (card.height !== container.attr('data-height')) {
          return;
        }
        data = container.data();
        if (data[0] == null) {
          data = [];
        }
        if (data.every(function(datum) {
          if (datum._id === _id && datum.key === key) {
            datum.card = card;
            return false;
          } else {
            return true;
          }
        })) {
          data.push({
            _id: _id,
            key: key,
            card: card
          });
        }
        cards = container.selectAll('.card').data(data);
        cards.enter().append('div').classed('card', true).classed(card['class'], true).style('width', width + 'px').style('height', "" + (container.attr('data-height')) + "px").html(card.content);
        return cards.exit().remove();
      });
    };

    return Cardboard;

  })();

}).call(this);
