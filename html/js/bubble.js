// Generated by CoffeeScript 1.6.3
(function() {
  var value;

  this.Bubble = (function() {
    function Bubble(node) {
      var d, k, time, v;
      if (node.bubble != null) {
        return node.bubble;
      }
      this.container = d3.select(node);
      d = this.container.datum();
      node.bubble = this;
      for (k in d) {
        v = d[k];
        this[k] = v;
      }
      if ((this.note == null) && this.at) {
        time = "" + (this.at.getHours()) + ":";
        if (this.at.getMinutes() < 10) {
          time += '0';
        }
        time += this.at.getMinutes();
        this.note = "measured at " + time;
      }
      this.createDom();
      this.position();
      this._dispatch = d3.dispatch('close');
      this.publish(this._dispatch, ['on']);
    }

    Bubble.prototype.publish = function(obj, methods) {
      var _this = this;
      return methods.map(function(name) {
        return _this[name] = obj[name].bind(obj);
      });
    };

    Bubble.prototype.createDom = function() {
      var labelBackground, labelText,
        _this = this;
      this._el = this.container.append('g').attr('class', 'popup').on('touchstart', function(d, i) {
        var id;
        if (_this.container.classed('current')) {
          if (_this.closesOnTouch) {
            d3.event.stopPropagation();
            return _this.close();
          } else {
            _this.toggleSeeThrough(true);
            id = "touchend.bubble" + (+d.at);
            return d3.select('body').on(id, function() {
              d3.select('body').on(id, null);
              return _this.toggleSeeThrough(false);
            });
          }
        } else {
          return _this.chart.bringIntoView(_this.at);
        }
      });
      labelBackground = this._el.append('rect').attr('x', 63).attr('y', -20).attr('height', 40).attr('rx', 20).attr('ry', 20);
      this._el.append('path').attr('d', 'M 16 -8 A 48 48 340 1 1 16 8 L 0 0 L 16 -8');
      this._el.append('text').attr('class', 'value').text("" + (value(this.value)) + " " + this.value_type).attr('text-anchor', 'middle').attr('alignment-baseline', 'central').attr('dx', 63).attr('dy', 0);
      labelText = this._el.append('text').attr('class', 'note').text(this.note).attr('text-anchor', 'start').attr('alignment-baseline', 'central').attr('dx', 120).attr('dy', 0);
      labelBackground.attr('width', 76 + labelText.node().getBBox().width);
      return this;
    };

    Bubble.prototype.close = function() {
      this._el.remove();
      this._dispatch.close();
      return this;
    };

    Bubble.prototype.position = function(transition, x, y) {
      if (!((x != null) && (y != null))) {
        x = this.chart.x(this.at);
        y = this.chart.y(this.value);
      }
      (transition ? this._el.transition().duration(300) : this._el).attr('transform', "translate(" + x + ", " + y + ")");
      return this;
    };

    Bubble.prototype.toggleSeeThrough = function(bool) {
      this._seeThrough = bool != null ? bool : !this._seeThrough;
      this._el.attr('opacity', this._seeThrough ? .2 : 1);
      return this;
    };

    return Bubble;

  })();

  value = function(v) {
    if (v < 1000) {
      return Math.round(v * 10) / 10;
    } else {
      return Math.round(v);
    }
  };

  this.bubble = function(node) {
    return new Bubble(node);
  };

}).call(this);
